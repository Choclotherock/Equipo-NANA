#V.1.0.6
#Actividad de filtrado y Análisis de datos de sensores

#Importamos bibliotecas
import pandas as pd #Librería para manipulacion de datos tabulables 
import numpy as np #Libreria para calculos numericos
import matplotlib.pyplot as plt #Libreria para graficacion de datos
from scipy.signal import butter, filtfilt #Libreria para diseñar y aplicar los filtros
from scipy.fft import fft, fftfreq #Libreria para hacer analisis de frecuencias de Fourier

#1.-Cargar los 3 archivos CSV
#Primero cargamos los archivos para que los busque y lea el programa
temperatura=pd.read_csv('temperatura.csv') #Abrir el archivo de datos de temperatura
humedad=pd.read_csv('humedad.csv') #Abrir el archivo de datos de humedad
viento=pd.read_csv('viento.csv') #Abrir archivo de datos de viento
#se leen los archivos tal cual nos los da el sensor


#Ajustamos nuestra escala y frecuencia de muestreo
inter_muestreo=5 #Intervalo de 5 segundos
frec_muestreo=1/inter_muestreo #Frecuencia en Hz para el muestreo

#Agregamos nuestra columna de tiempo en segundos para la graficacion del eje x
temperatura['Tiempo']=temperatura.index*inter_muestreo #Sacamos el tiempo multiplicando los datos del archivo por el intervalo de muestreo
humedad['Tiempo']=humedad.index*inter_muestreo
viento['Tiempo']=viento.index*inter_muestreo


#2.-Aplicar Promediado Móvil con el fin de suavizar nuestra señal
def promediado_movil(serie, ventana=3):
  # Aquí se aplica un promedio móvil a la serie de datos     
    return serie.rolling(window=ventana, center=True).mean()

#Se guarda como una nueva columna llamada promedio
# Se le aplica el promediado a las columnas de 'Temperatura_C', 'Humedad_Relativa_%', 'Velocidad_Viento_mps' y guarda el resultado en una nueva columna con el nombre de 'Promedio'
temperatura['Promedio'] = promediado_movil(temperatura['Temperatura_C'])
humedad['Promedio'] = promediado_movil(humedad['Humedad_Relativa_%'])
viento['Promedio'] = promediado_movil(viento['Velocidad_Viento_mps'])


#3.- Definimos nuestro filtro pasa bandas
def filtro_pbd(serie, f_baja=0.02, f_alta=0.2, orden=4):
    # Se crea un filtro pasa bandas utilizando la función butter para obtener los coeficientes b y a
    b, a = butter(orden, [f_baja, f_alta], btype= 'band')
    # Después se aplica el filtro a la serie de datos usando filtfilt para evitar que haya desfases
    return filtfilt(b,a,serie) #nuestro filtrado hacia adelante y hacia atras para no tener desfase

#Lo guardamos en nueva columna llamada PasaBandas
# También se le aplica el filtro pasa bandas a las columnas 'Temperatura_C', 'Humedad_Relativa_%', 'Velocidad_Viento_mps' y guarda el resultado en el apartado 'Pasa_Bandas'
temperatura['Pasa_Bandas'] = filtro_pbd(temperatura['Temperatura_C'])
humedad['Pasa_Bandas'] = filtro_pbd(humedad['Humedad_Relativa_%'])
viento['Pasa_Bandas'] = filtro_pbd(viento['Velocidad_Viento_mps'])

#Definimos filtro pasa bajas
def filtro_pbj(serie, fc=0.1, orden=4):
    # De nuevo se crea un filtro pasa bajas utilizando la función butter para obtener los coeficientes b y a
    b, a = butter(orden, fc, btype='low')
    # Tambien aplicamos el filtro a la serie de datos usando filtfilt
    return filtfilt(b, a, serie)

# Le ponemos el filtro pasa bajas a las columnas 'Temperatura_C', 'Humedad_Relativa_%', 'Velocidad_Viento_mps' y guarda el resultado en 'Pasa_Bajas'
temperatura['Pasa_Bajas'] = filtro_pbj(temperatura['Temperatura_C'])
humedad['Pasa_Bajas'] = filtro_pbj(humedad['Humedad_Relativa_%'])
viento['Pasa_Bajas'] = filtro_pbj(viento['Velocidad_Viento_mps'])

#Análisis de fourier
def calculo_fft(serie):
    # Se obtiene el número de muestras de la serie
    N=len(serie) #Numero de muestras
    # Se calcula el vector de frecuencias basado en la frecuencia de muestreo
    frec= fftfreq(N, d=1/frec_muestreo)[:N//2] #Vector de frecuencias
    # Tambien calculamos la transformada de Fourier y obtenemos la magnitud de las frecuencias
    magnitud= np.abs(fft(serie))[:N//2] #Calcula la transformada
    # Regresa el vector de frecuencias y la magnitud
    return frec, magnitud #Regresa la mitad positiva 

#4.-Graficamos todos los datos
def graficar_todo(df, columna, nombre_sensor):
    # Aquí se extrae la columna 'Tiempo' del DataFrame para usarla como eje X en las gráficas
    tiempo = df['Tiempo']
    # Aquí extrae una columna especificada para graficar los datos originales
    original = df[columna]
    # Aquí extrae la columna 'Promedio' para graficar la señal suavizada
    promedio = df['Promedio']
    # Aquí se extrae la columna 'Pasa_Bajas' para graficar la señal filtrada por el filtro pasa bajas
    baja = df['Pasa_Bajas']
    # Aquí se extrae la columna 'Pasa_Bandas' para graficar la señal filtrada por el filtro pasa bandas
    banda = df['Pasa_Bandas']

    plt.figure(figsize=(12, 8)) #define el tamaño de la grafica
    plt.plot(tiempo, original, label='Original') #Se ubica el valor original en la grafica
    plt.plot(tiempo, promedio, '--', label='Promediado') #Se ubica el valor Promediado en la grafica
    plt.plot(tiempo, baja, '--', label='Pasa Bajas') #Se ubica el valor del filtro Pasa Bajas en la grafica
    plt.plot(tiempo, banda, ':', label='Pasa Bandas') #Se ubica el valor del filtro Pasa Bandas en la grafica
    plt.title(f'{nombre_sensor} - Señales Procesadas') #Se ubica el titulo de la grafica
    plt.xlabel('Tiempo (s)') #Se define el tiempo en segundos en el eje X
    plt.ylabel(nombre_sensor) #Se define el valor de los sensores en el eje Y
    plt.legend() #Muestra la leyenda en la grafica
    plt.grid(True) #Muestra la cuadricula en la grafica
    plt.tight_layout() #Es para que no se sobreponga el nombre de las variables
    plt.show() #Muestra la grafica

    # FFT
    f_orig, y_orig = calculo_fft(original) #Ahora los datos pasan por la transformada de fourier y se pone el resultado
    f_baja, y_baja = calculo_fft(baja) 
    f_banda, y_banda = calculo_fft(banda) 

    plt.figure(figsize=(10, 5)) #Se define el tamaño de la grafica
    plt.plot(f_orig, y_orig, label='Original') #Se ubica el valor original en la grafica
    plt.plot(f_baja, y_baja, label='Pasa Bajas', linestyle='--') #Se ubica el valor del filtro Pasa Bajas en la grafica
    plt.plot(f_banda, y_banda, label='Pasa Bandas', linestyle=':') #Se ubica el valor del filtro Pasa Bandas en la grafica
    plt.title(f'{nombre_sensor} - Espectro de Frecuencia') #Se ubica el titulo de la grafica
    plt.xlabel('Frecuencia (Hz)') #Se asigna la Frecuencia en Hz al eje X
    plt.ylabel('Magnitud') #Se asigna el valor de la Magnitud en el eje Y
    plt.legend() #Muestra la leyenda en la grafica
    plt.grid(True) #Muestra la cuadricula en la grafica
    plt.tight_layout() #Es para que no se sobreponga el nombre de las variables
    plt.show() #Muestra la grafica

#Ejecutamos para cada uno de los sensores
graficar_todo(temperatura, 'Temperatura_C', 'Temperatura')
graficar_todo(humedad, 'Humedad_Relativa_%', 'Humedad')
graficar_todo(viento, 'Velocidad_Viento_mps', 'Viento')

